#!/usr/bin/env bash
set -eu

# IMPORTANT NOTE: Each buildkite pipeline slug must be named the same as the apps/<app name> directory

monorepo_root="$(realpath "$(dirname "${BASH_SOURCE}")/../../..")"

# CONFIGURATION

# apps to build - these should be subdirectories of apps and names of pipeline slugs
apps='app1 app2'
# the default branch should never be force-pushed (rebased or amended), so we can rely on last-passed-build-sha to always exist
default_branch='master' # This could automatically determined from the GITHUB API

# LOGIC

echo "Generating pipeline.yml for BUILDKITE_COMMIT=${BUILDKITE_COMMIT} on branch ${BUILDKITE_BRANCH}:"; echo

if [[ ${BUILDKITE_BRANCH} = ${default_branch} ]]
then
  # assume this branch wasn't force-pushed, and the last-passed-build-sha should exist
  echo "On default branch '${default_branch}', getting last PASSED build SHA as SHA to diff against..."
  ${monorepo_root}/nonapp/cicd/bk/last-passed-build-sha
  sha_to_diff_against=$(cat /tmp/last-passed-build-sha)
else
  # this branch may have been force-pushed, so we will just do a diff against the merge base of the upstream branch
  echo "On non-default branch '${BUILDKITE_BRANCH}', getting merge-base SHA against '${default_branch}' branch to diff against..."
  sha_to_diff_against=$(git merge-base ${BUILDKITE_COMMIT} ${default_branch})
fi
echo "SHA to diff against: ${sha_to_diff_against}"
echo

apps_to_build=''
# loop over all the apps under `apps/`
for app in ${apps}
do
  echo "Checking app '${app}' for paths which trigger builds..."
  changes=false
  # invoke each app's script which lists which absolute paths which trigger builds for that app...
  app_paths_which_trigger_builds=$(${monorepo_root}/apps/${app}/cicd/bk/paths-which-trigger-builds)

  # ...and loop over them
  for app_path_which_triggers_builds in ${app_paths_which_trigger_builds}
  do
    printf "  Checking path '${app_path_which_triggers_builds}' for git diffs... "
    # diff output will be empty if there's no changes in the relative path
    diff_output=$(git diff --relative=${app_path_which_triggers_builds} --shortstat ${sha_to_diff_against} ${BUILDKITE_COMMIT})
    if [[ -z "${diff_output// }" ]]
    then
      echo "No diffs found."
    else
      echo "diffs found: ${diff_output}"
      changes=true
    fi
  done
  # if changes were found for the app, add it to the list of apps to be built
  if ${changes}
  then
    echo "Changes found for app ${app}; it will be built."
    apps_to_build="${apps_to_build} ${app}"
  else
    echo "No changes found for app ${app}; it will not be built."
  fi
  echo
done

echo
pipeline_yml_path=${1:-'/tmp/monorepo-pipeline.yml'}
rm -f ${pipeline_yml_path}

if [[ -z "${apps_to_build// }" ]]
then
  echo "No apps changed, not generating ${pipeline_yml_path}:"
else
  # write the pipeline.yml to trigger each app which needs to be built
  echo 'steps:' >> ${pipeline_yml_path}
  for app_to_build in ${apps_to_build}
  do
    echo "- trigger: ${app_to_build}" >> ${pipeline_yml_path}
    echo '  async: true' >> ${pipeline_yml_path}
    echo '  build:' >> ${pipeline_yml_path}
    echo "    message: ${BUILDKITE_MESSAGE}" >> ${pipeline_yml_path}
    echo "    commit: ${BUILDKITE_COMMIT}" >> ${pipeline_yml_path}
    echo "    branch: ${BUILDKITE_BRANCH}" >> ${pipeline_yml_path}
  done

  echo "Generated ${pipeline_yml_path}:"; echo
  cat ${pipeline_yml_path}
fi
